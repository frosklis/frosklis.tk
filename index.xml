<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Claudio Noguera</title><link>https://frosklis.tk/</link><description>Recent content on Claudio Noguera</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Mon, 06 Apr 2020 19:41:09 +0200</lastBuildDate><atom:link href="https://frosklis.tk/index.xml" rel="self" type="application/rss+xml"/><item><title>De kmc2.tk a kmc2.es</title><link>https://frosklis.tk/posts/de-kmc2-tk-a-kmc2-es/</link><pubDate>Mon, 06 Apr 2020 19:41:09 +0200</pubDate><guid>https://frosklis.tk/posts/de-kmc2-tk-a-kmc2-es/</guid><description>Claudio Noguera https://frosklis.tk/posts/de-kmc2-tk-a-kmc2-es/ -&lt;p>&lt;a href="https://kmc2.tk">Mi otro blog, al igual que este, tiene un dominio tk&lt;/a>. También está escrito en español, &lt;a href="https://kmc2.es">así que he cambiado el dominio a .es&lt;/a>. Aprovecho para contar cómo están montados mis dos blogs.&lt;/p>
&lt;p>Empecé en esto del blogging usando &lt;a href="https://www.wordpress.org">wordpress&lt;/a>, una plataforma estupenda presente en más del 20% de la web. Wordpress está muy bien, pagando un poco es muy fácil de usar y no tiene. Después, por aprender, lo migré a &lt;a href="https://cloud.google.com/appengine">Google Appengine&lt;/a>. Luego a &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>. Y, espero que sea ya la última vez, a &lt;a href="https://gohugo.io/">Hugo&lt;/a>.&lt;/p>
&lt;p>El motivo de abandonar &lt;a href="https://www.wordpress.org">wordpress&lt;/a> es que quería más control. App engine de google fue un ejercicio muy bueno, porque aprendí mucho sobre APIs y sobre Google. De eso hace tiempo ya, pero me encantó usar el &lt;a href="https://cloud.google.com/datastore">data store&lt;/a> y en general la suite d Google Cloud, que para el uso que yo le daba era prácticamente gratuita, máxime cuando las fotos las tenía almacenadas en &lt;a href="https://www.flickr.com/photos/136165817@N06/">flickr&lt;/a>.&lt;/p>
&lt;p>Un inciso, las fotos siempre han sido un problema: hay que tenerlas en muchos tamaños, si cambias el diseño de la web hay que regenerarlas. Hice bastantes scripts para hacer cosas de ese estilo. Es un poco más complicado además cuando la foto original está en RAW. Y no quiero pagar varias veces por almacenar las mismas fotos, ahora mismo las tengo en &lt;a href="https://lightroom.adobe.com">lightroom&lt;/a>, que no es nada barato pero me da acceso al software que ya tenía.&lt;/p>
&lt;p>Con lo de las fotos y con el problema que suponía mantener una plataforma par blogs propia, busqué una alternativa que me permitiera jugar con la tecnología sólo si yo quería y descubrí &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>. Jekyll es un generador de páginas estático. La ventaja de generar las páginas de forma estática es que para alojar el blog vale cualquier cosa y la falta de dinamismo se puede suplir con Javascript y con servicios de terceros, por ejemplo &lt;a href="https://disqus.com/">Disqus&lt;/a> para comentarios.&lt;/p>
&lt;p>Pero &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> me resultaba muy difícil de personalizar porque Ruby no lo domino bien, así que otra vez busqué una alternativa y encontré &lt;a href="https://gohugo.io/">Hugo&lt;/a>, que es lo que uso ahora.&lt;/p>
&lt;p>En ese sentido, actualmente mis dos blogs tienen la misma configuración:&lt;/p>
&lt;ol>
&lt;li>Están alojados en &lt;a href="https://github.com/">github&lt;/a> utilizando &lt;a href="https://pages.github.com">github pages&lt;/a>.&lt;/li>
&lt;li>La generación de los HTML no la hago yo si no que la tengo automatizada con &lt;a href="https://travis-ci.com/">Travis&lt;/a>&lt;/li>
&lt;li>Utilizo &lt;a href="(https://www.cloudflare.com/)">Cloudflare&lt;/a> como CDN.&lt;/li>
&lt;/ol>
&lt;p>Si el código de la web es abierto, todo lo anterior es gratuito. Lo único por lo que hay que pagar es el dominio. Y por eso usaba un dominio .tk, porque eran gratis. Ya no lo son, o sí lo son pero sólo durante un tiempo. Y salvo el precio, para todo lo demás los dominios .tk son malos: la propia web de gestión es horrorosa y de cara a posicionamiento en buscadores e imagen en general, no es un dominio bueno. No me importaría, eso sí, conocer la isla de &lt;a href="https://en.wikipedia.org/wiki/Tokelau">Tokelau&lt;/a> que da nombre al dominio, parece que están administradas por Estados Unidos.&lt;/p>
&lt;p>Uno de los motivos de usar &lt;a href="(https://www.cloudflare.com/)">Cloudflare&lt;/a> es que realmente es muy malo el DNS. Pero además, y sobre todo cuando todo esto estaba alojado en AppEngine, tener un CDN quita tráfico del servidor y eso se traduce en menos dinero. Además la interfaz de Cloudflare es muy buena y se puede acceder por API, lo cual permite borrar el caché cada vez que se genera una versión nueva de la web.&lt;/p>
&lt;h1 id="cambiar-el-dominio">Cambiar el dominio&lt;/h1>
&lt;p>Dicho todo eso, ¿qué hay que hacer para cambiar el dominio?&lt;/p>
&lt;p>Lo primero es esperar porque los cambios de dominio tienen que propagarse por los DNS del mundo. No es inmediato, tarda unas horas. &lt;a href="https://dnschecker.org/">DNSchecker es una web que se puede usar para comprobarlo&lt;/a>.&lt;/p>
&lt;p>Con el dominio comprado, para seguir teniéndolo en Cloudflare hay que añadirlo a través de su interfaz gráfica y cambiar en el proveedor los DNS para que apunten a estos dos:&lt;/p>
&lt;ul>
&lt;li>gabe.ns.cloudflare.com&lt;/li>
&lt;li>dawn.ns.cloudflare.com&lt;/li>
&lt;/ul>
&lt;p>Cloudflare importa la configuración del dominio automáticamente. Además yo marco cosas como que se ofrezcan versiones minificadas del HTML, CSS y Javascript, proporciono un certificado autofirmado (en Cloudflare es encriptación &amp;ldquo;fulll&amp;rdquo;) y digo que siempre se use HTTPS.&lt;/p>
&lt;p>Independientemente de que se use o no Cloudflare, hay que decir en el DNS que queremos que apunte a la ip donde esté el servidor correspondiente, &lt;a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">aquí se ven los de Github&lt;/a>.&lt;/p>
&lt;p>Después en github, desde el propio repositorio la ayuda dice que hay que cambiar el dominio de forma manual. En realidad no es necesario, sólo hay que cambiar el fichero CNAME en la rama gh-pages (o la rama desde la que se está cambiando el repositorio). Y como lo tengo todo automatizado, ya está.&lt;/p>
&lt;p>Próximamente cambiaré el dominio de este blog también.&lt;/p>
- https://frosklis.tk/posts/de-kmc2-tk-a-kmc2-es/ -</description></item><item><title>Mi primer paquete en Pypi</title><link>https://frosklis.tk/posts/mi-primer-paquete-en-pypi/</link><pubDate>Sat, 04 Apr 2020 00:33:00 +0200</pubDate><guid>https://frosklis.tk/posts/mi-primer-paquete-en-pypi/</guid><description>Claudio Noguera https://frosklis.tk/posts/mi-primer-paquete-en-pypi/ -&lt;p>He hecho &lt;a href="https://github.com/frosklis/cn-machine-learning">un paquete que he llamado cnml&lt;/a>. Y lo estoy haciendo con fines autoformativos porque en los proyectos en los que trabajo nunca hago yo solo el trabajo de principio a fin. Mi conclusión es que cuando los proyectos son de código abierto es mucho más fácil todo.&lt;/p>
&lt;p>Todo empieza por tener un &lt;a href="https://packaging.python.org/tutorials/packaging-projects/">código bien estructurado que se pueda instalar con setuptools&lt;/a> y con crearse una cuenta en &lt;a href="https://pypi.org/">pypi.org&lt;/a>. El único requisito es que el nombre del paquete no exista en pypi. Hecho eso, el paquete se puede subir por línea de comandos.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python setup.py dist
twine upload dist&lt;span style="color:#ae81ff">\*&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Existen formas de automatizar lo anterior para que no sea necesario introducir el nombre de usuario y contraseña cada vez. Pero puestos a hacer eso, es mejor todavía hacer el ciclo completo de devops. Las prácticas de integración continua han mejorado mucho en los últimos años en cuanto a facilidad de uso. Ahora cualquiera lo puede hacer y contribuyen a que el código que tenemos sea mantenible. El desencadenante de todo es un commit. Se puede configurar github (o cualquier repositorio git) para que se desencaden acciones cada vez que ocurre algo. De hecho todos los grandes (github, gitlab, bitbucket y los internos de las plataformas en la nube de Amazon, Google y Microsoft) tienen APIs y se pueden conectar a terceros.&lt;/p>
&lt;p>En el mundo open source el más famoso es &lt;a href="https://jenkins.io/">Jenkins&lt;/a>. Los proveedores cloud tienen los suyos, Atlassian tiene el suyo. Lo que no me gusta de Jenkins es que tiene la barrera de entrada de que hace falta una infraestructura donde desplegarlo y hacerlo funcionar. Por eso yo he utilizado &lt;a href="https://travis-ci.com/">Travis&lt;/a> que funciona como servicio y es gratis para proyectos opensource. Podía haber utilizado también &lt;a href="https://circleci.com/">Circle CI&lt;/a>.&lt;/p>
&lt;p>Usando travis, lo único que hay que hacer es configurar el script .travis.yml que tiene que estar en la raíz del repositorio. &lt;a href="https://github.com/frosklis/cn-machine-learning/blob/master/.travis.yml">El mío es este&lt;/a> y hoy (4 de abril de 2020) tiene esta pinta:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#66d9ef">language&lt;/span>: python
&lt;span style="color:#66d9ef">script&lt;/span>: pytest --cov=cnml
&lt;span style="color:#66d9ef">after_success&lt;/span>: bash &amp;lt;(curl -s https://codecov.io/bash)
&lt;span style="color:#66d9ef">deploy&lt;/span>:
&lt;span style="color:#66d9ef">on&lt;/span>:
&lt;span style="color:#66d9ef">tags&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">provider&lt;/span>: pypi
&lt;span style="color:#66d9ef">user&lt;/span>: __token__
&lt;span style="color:#66d9ef">password&lt;/span>:
&lt;span style="color:#66d9ef">secure&lt;/span>: lUDdfS0w/P3YF7QospZmVHo0YWuFvuIwuteIQjzUuuJbOlA5K00iNHvuSp9cLx89pFL+dWO61ar2qYechdT1UdtKlvEZpbthgMACMkftY8F+LBUUs95DIph/1arUabr6ZOVyuc6kuc3YvaHMK78FjEB4J5YftRznp3LVLJPpWIjL1oOpPCbI4ETjxA+SvLqQGerKfTPUQWogjB/iDjLOczdWY9y6haHaF43svaFy7LWL2fxTC95PKhXANjGlME0mociZI1aIykZbOk58/WOLew4De7jCeN/sCathBKpq4cAV222RoAV73Rx9FWucS2U4XeRFGMUA8Bvv3T0gCoIzTN1C+wmN7g0SJBqVJkdSf/eN/fPo4sw8Fu0Ohs0iJr1f74h2z6EQeuKdMER5sxEUP1t1HWj8elQ1JwQT1h4AjXJSccGFJcYdvaP4SWr2+2x4uayPbg32R+5iQu0y7WMDtEH5KsNgJ9GBJ7YxLnLImx2UtkF6Iem/AYTYcP2PikW2RbOZM1A4DWakYvMAzegyWj8yjOp65tWfp2ntQ6LzjAJbauzBnVmGkoBAS2zQPv0kbiYoeE0pdQKaHqAl9tU0EjotN/n0DGKrEn0zay+GbMrL0uyDSwCkqHpxdBW5hCVJAzLQg3EJy8lVNyDp3EYq3Bl/bPqjRmWxJC6iLMXo4Z4=
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hace más cosas que simplemente generar el paquete:&lt;/p>
&lt;ol>
&lt;li>genera el paquete&lt;/li>
&lt;li>ejecuta los tests con cobertura&lt;/li>
&lt;li>manda el informe de esa cobertura a codecov.io para verlo gráficamente&lt;/li>
&lt;li>y sólo si el commit corresponde a una etiqueta sube el paquete a pypi&lt;/li>
&lt;/ol>
&lt;p>Lo que no tengo todavía bien resuelto es el nombrado de versiones. Utilizo el estándar &lt;a href="https://semver.org">semver&lt;/a>, pero no de forma tan automatizada como me gustaría. En el repositorio en sí me gustaría hacer sólo lo que estoy haciendo ahora, que es tnner la versión (ahora mismo la 0.2.0 en desarrollo). Pero de cara a subirlo a pypi la versión no puede ser la misma, hay que añadirle apellidos, por ejemplo 0.1.1-dev1. Es la generación de ese apellido la que todavía no tengo bien resuelta.&lt;/p>
&lt;p>Por cierto, no he dicho qué hace el paquete. Lo quiero utilizar para tener ordenadas implementaciones de algoritmos que utilizo para resolver algún problema. Ahora mismo tiene dos: un interpolador de curvas basado en &lt;a href="https://es.wikipedia.org/wiki/Spline">splines&lt;/a> y una trasnformación muy útil para modelos binarios, el &lt;a href="https://medium.com/@sundarstyles89/weight-of-evidence-and-information-value-using-python-6f05072e83eb">WoE (peso de la evidencia)&lt;/a>. Mi implementación del WoE es más elegante que la del link que pongo, la de los splines de momento no tanto.&lt;/p>
&lt;p>Finalmente, dejo aquí unos enlaces que he leído para poder hacer esto:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ron.sh/how-to-submit-a-package-to-pypi/">Una guía de cómo hacerlo de principio a fin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56">Consideraciones para subir un paquete a pypi&lt;/a>&lt;/li>
&lt;li>Tendría que firmar las tags de los repositorios, &lt;a href="https://rem.co/blog/2015/02/12/git-the-difference-between-lightweight-and-annotated-tags/">aquí se explica por qué&lt;/a>&lt;/li>
&lt;/ul>
- https://frosklis.tk/posts/mi-primer-paquete-en-pypi/ -</description></item><item><title>Usando Git</title><link>https://frosklis.tk/posts/usando-git/</link><pubDate>Fri, 27 Mar 2020 19:30:22 +0100</pubDate><guid>https://frosklis.tk/posts/usando-git/</guid><description>Claudio Noguera https://frosklis.tk/posts/usando-git/ -&lt;p>Además de los comandos básicos de git, cuando se trabaja con más personas se hace necesario no sólo el que todos los que trabajan en el equipo usen git sino acordar también la manera en la que se va a usar el repositorio. Esto es definir una manera de llamar las ramas y una política de ramificación (qué ramas se pueden crear a partir de otras) y qué tiene que pasar para poder integrar unas ramas en otras (&lt;code>git merge&lt;/code>).&lt;/p>
&lt;p>Hacer esto de manera estandarizada tiene dos ventajas. Por un lado se hace más fácil el integrar el código en procesos de integración y desarrollo continuos (las famosas &lt;em>devops&lt;/em>). Y por otro, no menos importante, se elimina una barrera de entrada a la hora de incorporar nuevos miembros a los proyectos, pues es posible que ya conozcan el estándar.&lt;/p>
&lt;p>Principalmente hay dos estándares, con sus pros y contras: &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/">git-flow&lt;/a> y &lt;a href="https://guides.github.com/introduction/flow/">github-flow&lt;/a>. Personalmente, en los proyectos empresariales suelo utilizar git-flow y en los personales github-flow. El motivo es que git-flow hace que sea más difícil que lleguen cosas sin probar a la rama master y esto es bueno en equipos donde hay desarrolladores con poca experiencia y desarrolladores que no son desarrolladores (lo segundo es bastante habitual).&lt;/p>
&lt;p>Además ese motivo, git-flow es bueno cuando hay que llevar un control estricto de las versiones para lo cual recomiendo usar &lt;a href="https://semver.org/">&lt;em>semver&lt;/em>, el nombrado semántico de versiones&lt;/a>. Una cosa importante es usar siempre el flag &lt;em>&amp;ndash;no-ff&lt;/em> al integrar las ramas, la guía de git-flow lo menciona. Esto hace que cada vez que se hace un &lt;em>merge&lt;/em> se cree un nuevo &lt;em>commit&lt;/em> aunque no sea necesario porque podría haberse hecho sin él (con un &lt;em>fast-forward&lt;/em>); en la práctica lo que se consigue es que en el dibujo de la historia del repositorio las ramas se vean con mucha más claridad y de forma explícita.&lt;/p>
&lt;p>En esencia en git-flow todo el desarrollo ocurre en la rama &lt;em>develop&lt;/em>. De la rama develop salen features (ramas con el prefijo &lt;em>feature/&lt;/em>) y releases (ramas con el prefijo &lt;em>release/&lt;/em>). A la rama &lt;em>master&lt;/em> sólo se llevan los cambios de la rama &lt;em>release&lt;/em>. En la rama &lt;em>release&lt;/em> solo se pueden hacer correcciones de errores (&lt;em>bugfix/&lt;/em>) y en la rama &lt;em>master&lt;/em> sólo se pueden hacer &lt;em>hotfix/&lt;/em>. Es habitual que la rama &lt;em>release&lt;/em> se despliegue en un entorno de desarrollo o pruebas de usuario sobre el que se van corrigiendo errores y, una vez corregidos esos errores, se llevan (o no) a la rama &lt;em>master&lt;/em>.&lt;/p>
&lt;p>Github-flow es más fácil de usar. A partir de la rama &lt;em>master&lt;/em> se crean ramas, con cualquier nombre. Cuando la rama está lista, se hace un &lt;em>pull request&lt;/em> y entonces se hacen los cambios pertinentes. En github además se tiene una especie de wiki asociados a los &lt;em>pull requests&lt;/em>, con lo cual se pueden discutir esos cambios. A partir de cualquier commit se puede hacer un despliegue. Una vez hechas las pruebas, el resultado es volver a &lt;em>master&lt;/em> con &lt;em>merge&lt;/em>. Y ya está.&lt;/p>
&lt;p>Además (github-flow lo menciona pero no es imprescindible en su sistema) yo recomiendo hacer etiquetas con &lt;code>git tag&lt;/code> para tener control de las versiones, es mucho más fácil referirse a un commit concreto por su etiqueta que por su commit.&lt;/p>
- https://frosklis.tk/posts/usando-git/ -</description></item><item><title>Sobre devops</title><link>https://frosklis.tk/posts/sobre-devops/</link><pubDate>Mon, 16 Dec 2019 21:23:43 +0100</pubDate><guid>https://frosklis.tk/posts/sobre-devops/</guid><description>Claudio Noguera https://frosklis.tk/posts/sobre-devops/ -&lt;p>Developer operations es lo que significa &amp;ldquo;devops&amp;rdquo;.
Es lo que lleva a trabajar de un modo amateur a trabajar de forma profesional.
Y trabajar de foma profesional hace que uno se sienta productivo y esa satisfacción de sentirse productivo para mí vale más que los evidentes beneficios empresariales, que los hay y están documentados; hay muchos que han escrito mucho mejor que yo sobre el tema.&lt;/p>
&lt;p>Y yo, ¿cómo trabajaba antes? Pues imagino que como todos: sin orden. Cuando se es estudiante sí que hay orden: uno va a clase, le cuentan una cosa y necesita aprenderla (normalmente estudiando) para finalmente aprobar un examen. Tú te organizas tu tiempocomo quieres y hay gente que lo hace mejor que otra pero &lt;em>se sabe perfectamente lo que hay que hacer&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>las tareas están claras&lt;/li>
&lt;li>y acotadas en el tiempo&lt;/li>
&lt;/ul>
&lt;p>Esas dos cosas hacen que recuerde con cariño la carrera, me gustaba lo que estudiaba y me gustaba estudiar; después de cada tarde de estudio veía avance.&lt;/p>
&lt;p>Luego llega la vida profesional y lo primero que descubre uno es la cantidad de tiempo que se pierde. Y también que, a diferencia de la época universitaria, los proyectos salen adelante con el trabajo de más de una persona porque hay cosas que no se pueden hacer solo. Descubres esas cosas que a uno le cuentan en la carrera pero sólo desde un punto de vista teórico: los diagramas de Gantt, la planificación de proyectos, la gestión de dependencias, esas cosas. Todo eso es una gestión del tiempo en cascada (en inglés waterfall).&lt;/p>
&lt;p>Y los proyectos en cascada se retrasan. Siempre. Y se retrasan mucho. El manifiesto agile, en 2001, fue una respuesta a todo eso y, como venía del mundo del software, está tardando en adoptarse en el resto de disciplinas. Es un error porque claramente waterfall no funciona.&lt;/p>
&lt;p>No funciona, según la literatura, porque es imposible tener un plan maestro a largo plazo con el detalle suficiente. Es imposible anticipar todo lo que puede salir mal, las dependencias entre unas tareas y otras. Además de que da igual la experiencia que se tenga: estimar cuánto tiempo lleva hacer una cosa es algo que hacemos mal.&lt;/p>
&lt;p>Pero hay otro aspecto que se menciona poco y que a mí me parece muy importante. Da igual el marco de trabajo que se tenga, ágil o en cascada, un proyecto va bien si las personas que trabajan en él son productivas. Y ser productivo significa trabajar mejor en el día a día. Es algo que en otros sectores sí se hace bien.&lt;/p>
&lt;p>En la hostelería, por ejemplo. Vayan ustedes a un Starbucks, ¿a que funciona bien? Todo el mundo sabe lo que tiene que hacer y nadie está perdiendo el tiempo. Los procesos que existen están optimizados.&lt;/p>
&lt;p>Un hospital también funciona bien. Utilizaré analogías con hospitales con frecuencia, al fin y al cabo en mi familia hay mucho médico. Decía, un hospital también funciona bien. El tiempo del médico en consulta o en un acto médico está bien aprovechado, existe toda una coreografía alrededor del paciente que hace que las cosas salgan bien. Muchas de las labores del personal médico están protocolizadas, eso reduce errores.&lt;/p>
&lt;p>Y pese a todo esto, en las empresas tradicionalmente siempre se ha trabajado por proyectos en modo waterfall. Y cuando no se trabaja por proyecto, cuando se trabaja a demanda como hace un médico o un camarero, toda la optimización de procesos que existe en esos trabajos se olvida y sus enseñanzas no calan en el mundo de los proyectos.&lt;/p>
&lt;p>Entro ya en el mundo del software, que no es diferente a los otros; todo es trasladable.&lt;/p>
&lt;p>Llevo algo más de dos años trabajando en agile. Y más de diez desarrollando software. Nos gusta en mi mundo decir que lo que yo hago no es software, que son modelos analíticos. Con esa excusa, trabajamos mal. Trabajamos mal porque no tenemos procesos y trabajamos mal porque escribimos software sin calidad. Eso se acabó.&lt;/p>
&lt;p>Desde un punto de vista de gestión de proyecto, agile es muy superior a todo lo que sea waterfall. Agile tiene varios marcos de ejecución (frameworks), los más conocidos son scrum y kanban. Son diferentes pero tienen sus puntos en común.&lt;/p>
&lt;ul>
&lt;li>todo el mundo sabe (o puede saber) las tareas de todo el mundo&lt;/li>
&lt;li>todos pueden ver las tareas pendientes&lt;/li>
&lt;li>todos pueden saber cuánto tiempo ha llevado hacer una tarea (en realidad no siempre, pero el sotware ayuda)&lt;/li>
&lt;/ul>
&lt;p>Esta transparencia hace que para los miembros de un equipo sea más fácil trabajar en equipo y que para la gente de fuera sea muy fácil hacer un seguimiento del proyecto. Responder a la típica pregunta de ¿vamos bien?&lt;/p>
&lt;ul>
&lt;li>the art of doing twice the job in half the time&lt;/li>
&lt;li>the pragmatic programmer&lt;/li>
&lt;li>git flow&lt;/li>
&lt;li>devops handbook&lt;/li>
&lt;/ul>
- https://frosklis.tk/posts/sobre-devops/ -</description></item><item><title>Sobre design thinking, agile y todas esas cosas</title><link>https://frosklis.tk/posts/sobre-design-thinking-agile-y-todas-esas-cosas/</link><pubDate>Sun, 01 Sep 2019 10:12:44 +0200</pubDate><guid>https://frosklis.tk/posts/sobre-design-thinking-agile-y-todas-esas-cosas/</guid><description>Claudio Noguera https://frosklis.tk/posts/sobre-design-thinking-agile-y-todas-esas-cosas/ -&lt;p>Acabo de leer &lt;a href="https://www.invisionapp.com/inside-design/what-is-design-thinking/">este artículo&lt;/a>, que está bien pero creo que no da en el clavo.&lt;/p>
&lt;p>Desde hace algún tiempo, y para una tipología de proyectos amplia (no solo software), se viene diciendo que la planificación en cascada (waterfall) no tiene sentido. Y creo firmemente que es verdad. Tiene dos problemas: (casi) siempre hay retrasos y, aún peor, no está claro que se resuelva el problema que hay que resolver.&lt;/p>
&lt;p>Es muy difícil, en un proyecto largo, ser clarividente y tener una planificación detallada y acertada de lo que va a pasar a lo largo de todo el proyecto. Las necesidades cambian y los tiempos de ejecución de las tareas tienen demasiada incertidumbre. Por eso surge &lt;a href="https://agilemanifesto.org/">agile&lt;/a> y dentro de agile &lt;a href="https://www.amazon.es/Scrum-Doing-Twice-Work-Half/dp/1847941109">scrum&lt;/a>, que buscan solucionar estos dos problemas del waterfall.&lt;/p>
&lt;p>Mi experiencia es que scrum funciona. Pero solo funciona si se hace bien, cosa complicada porque agile (y design thinking, ahora hablo de él) implica un cambio en la forma de pensar, un cambio de mentalidad. Son los más difíciles de hacer. Los detractores de scrum simplifican diciendo que en scrum no se planifica o que los plazos dan igual; nada más lejos de la realidad. En scrum sí se planifica, con mucho más detalle de hecho: cada cosa que hay que hacer (historia de usuario) debe estar lo suficientemente bien definida como para que se pueda descomponer en subtareas que se puedan estimar y acometer dentro de un sprint. Lo que cambia es el momento de definir esas historias de usuario, que sólo se definen bien cuando se acerca el momento de hacerlas. Definir qué hay que hacer y priorizarlo es el trabajo del product owner. Estimar es trabajo del equipo. Y se planifica, de hecho se planifica en detalle al principio de cada sprint. El sprint es inflexible, pero como se puede repriorizar al principio de cada sprint, el hacer el trabajo que hay que hacer y no otro está garantizado.&lt;/p>
&lt;p>¿O no? ¿Cómo se decide qué es lo que hay que hacer? Aquí entra el design thinking. Para mí, design thinking no va de resolver problemas. Resolver problemas debería ser algo fácil (mejorar la capacidad de resolver problemas debería ser uno de los objetivos de todo sistema educativo), estamos entrenados para ello desde pequeños. Pero lo que se nos enseña a resolver son problemas que decide otro, los enunciados vienen dados. Lo difícil, lo verdaderamente importante es resolver el problema adecuado: ahí es donde entra el design thinking.&lt;/p>
&lt;p>El &lt;a href="https://www.invisionapp.com/inside-design/what-is-design-thinking/">el artículo que citaba al principio&lt;/a> lo menciona como una de las fases del design thinking: empathize, define, ideate, prototype, test. Par mí eso es darle demasiado bombo a lo que es realmente design thinking. La fases de empatizar y definir sólo so hacen una vez, el resto son cíclicas. Y por eso definir es tan importante. De nada sirve tener una solución perfecta para un problema que no necesita ser resuelto. Scrum permite estar equivocado durante un solo sprint. Design thinking permite definir bien el problema.&lt;/p>
&lt;p>Se complementan.&lt;/p>
- https://frosklis.tk/posts/sobre-design-thinking-agile-y-todas-esas-cosas/ -</description></item><item><title>Usando vim</title><link>https://frosklis.tk/posts/usando-vim/</link><pubDate>Tue, 02 Jul 2019 22:33:19 +0200</pubDate><guid>https://frosklis.tk/posts/usando-vim/</guid><description>Claudio Noguera https://frosklis.tk/posts/usando-vim/ -&lt;p>El ratón es lo más cómodo pero el teclado es lo más rápido. Por eso quiero usar vim más en la medida de lo posible. Por ejemplo para bloguear. En &lt;a href="https://gohugo.io/">Hugo&lt;/a> se puede &lt;a href="https://gohugo.io/getting-started/quick-start/">crear un post con el comando &lt;em>hugo new posts/un-post-nuevo.md&lt;/em>&lt;/a> y, para hacerlo más cómodo se puede añadir la línea&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#a6e22e">NewContentEditor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;vim&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>al &lt;em>config.toml&lt;/em> de modo que al escribir ese comando se abra vim. Lo cuentan &lt;a href="https://discourse.gohugo.io/t/create-and-open-new-post-with-one-liner-in-terminal/1454/2">aquí&lt;/a>&lt;/p>
&lt;p>Y con eso es suficiente par empezar a trabajar. Parece más rápido que usar mi adorado &lt;a href="https://code.visualstudio.com/">Visual Studio Code&lt;/a>, que es el editor que realmente uso. Pero siempre viene ver saber usar vim porque es lo que está disponible en entornos Linux a los que se suele conectar uno por ssh.&lt;/p>
&lt;h2 id="algunos-trucos-de-vim">Algunos trucos de vim&lt;/h2>
&lt;ul>
&lt;li>la letra &lt;em>o&lt;/em> inserta una línea debajo del cursor. En mayúscula lo hace encima. &lt;a href="https://vim.fandom.com/wiki/Quickly_adding_and_deleting_empty_lines">Editando el .vimrc se pueden hacer cosas más complejas&lt;/a>.&lt;/li>
&lt;li>normalmente el cursor se desplaza por líneas físicas, no por líneas mostradas, &lt;a href="https://vim.fandom.com/wiki/Move_cursor_by_display_lines_when_wrapping">eso también se puede cambiar&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="plugins">Plugins&lt;/h2>
&lt;p>Vim tiene plugins y no hay un sistema único para gestionarlos. Al fin y al cabo los plugins no son más que scripts que se llaman desde el .vmrc, donde se puede configurar todo.&lt;/p>
&lt;p>Yo utilizo &lt;a href="https://github.com/junegunn/vim-plug">plug.vim&lt;/a> porque lo recomienda &lt;a href="https://www.youtube.com/watch?v=cTBgtN-s2Zw">este señor&lt;/a>&lt;/p>
- https://frosklis.tk/posts/usando-vim/ -</description></item><item><title>Distance between two random points in a square</title><link>https://frosklis.tk/posts/distance-between-two-random-points-in-a-square/</link><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid>https://frosklis.tk/posts/distance-between-two-random-points-in-a-square/</guid><description>Claudio Noguera https://frosklis.tk/posts/distance-between-two-random-points-in-a-square/ -&lt;p>I don&amp;rsquo;t remember where I read this problem. What is the average distance of two points chosen randomly in a square?&lt;/p>
&lt;p>This simple python script gives an approximation.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> random
&lt;span style="color:#f92672">import&lt;/span> math
n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100000&lt;/span>
s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
p &lt;span style="color:#f92672">=&lt;/span> [random&lt;span style="color:#f92672">.&lt;/span>random() &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">4&lt;/span>)]
s &lt;span style="color:#f92672">+=&lt;/span> math&lt;span style="color:#f92672">.&lt;/span>sqrt((p[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">-&lt;/span>p[&lt;span style="color:#ae81ff">2&lt;/span>])&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (p[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">-&lt;/span>p[&lt;span style="color:#ae81ff">3&lt;/span>])&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(s &lt;span style="color:#f92672">/&lt;/span> n)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Turns out it is around 0.52 (I got 0.5217335102356029 from my simulation). This is a hard one to solve analytically, but we don&amp;rsquo;t need to.&lt;/p>
- https://frosklis.tk/posts/distance-between-two-random-points-in-a-square/ -</description></item><item><title>Tic-tac-toe dynamic programming</title><link>https://frosklis.tk/posts/tic-tac-toe-dynamic-programming/</link><pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate><guid>https://frosklis.tk/posts/tic-tac-toe-dynamic-programming/</guid><description>Claudio Noguera https://frosklis.tk/posts/tic-tac-toe-dynamic-programming/ -&lt;p>This is the first of many articles regarding reinforcement learning, which is something I want to master. I will try to do it using &lt;a href="https://webdocs.cs.ualberta.ca/~sutton/book/the-book.html">&amp;ldquo;Reinforcement learning&amp;rdquo;, by Richard Sutton and Andrew Barto&lt;/a> as a reference. The objective of a reinforcement learning system is building a program that learns rather than the much more usual, the human learns and teaches the computer the result of its learning.&lt;/p>
&lt;p>As with everything, first steps are humble: the tic-tac-toe game. The book does not provide an implementation. I found however &lt;a href="https://www.xanvong.com/posts/blog/tic-tac-toe-dp-and-memo">this nice implementation&lt;/a> using dynamic programming:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">build_best_responses&lt;/span>(self, board&lt;span style="color:#f92672">=&lt;/span>None, player&lt;span style="color:#f92672">=&lt;/span>None):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Recursively compute best responses for all subgames of current board.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Call with no arguments to build the entire best_responses dict.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> This adds a key to best_responses for each possible board configuration
&lt;/span>&lt;span style="color:#e6db74"> that could follow from board.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> player = 1 for X, -1 for O. This is the current player, i.e. the one
&lt;/span>&lt;span style="color:#e6db74"> who goes next given the current board.
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Initialize&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> board &lt;span style="color:#f92672">is&lt;/span> None:
board &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span>,) &lt;span style="color:#f92672">*&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>SIZE
player &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> board &lt;span style="color:#f92672">in&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>best_responses:
&lt;span style="color:#66d9ef">return&lt;/span>
win &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>check_win(board, player)
&lt;span style="color:#75715e"># If win/loss/draw has been determined, the game is over.&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> win &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> None:
self&lt;span style="color:#f92672">.&lt;/span>best_responses[board] &lt;span style="color:#f92672">=&lt;/span> (None, win) &lt;span style="color:#75715e"># None =&amp;gt; no move needed&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#75715e"># If we don&amp;#39;t know the best response yet, compute it.&lt;/span>
best_value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i, val &lt;span style="color:#f92672">in&lt;/span> enumerate(board):
&lt;span style="color:#66d9ef">if&lt;/span> val &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;span style="color:#75715e"># create new tuple with player&amp;#39;s move in ith slot&lt;/span>
board2 &lt;span style="color:#f92672">=&lt;/span> board[:i] &lt;span style="color:#f92672">+&lt;/span> (player,) &lt;span style="color:#f92672">+&lt;/span> board[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:]
&lt;span style="color:#75715e"># If board2 is already in best_responses, this does nothing.&lt;/span>
&lt;span style="color:#75715e"># Otherwise, it ensures board2 is added to best_responses.&lt;/span>
self&lt;span style="color:#f92672">.&lt;/span>build_best_responses(board2, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> player)
&lt;span style="color:#75715e"># The player&amp;#39;s value given board2 is the reverse of the next&lt;/span>
&lt;span style="color:#75715e"># player&amp;#39;s value&lt;/span>
value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>best_responses[board2][&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> value &lt;span style="color:#f92672">&amp;gt;&lt;/span> best_value:
best_value, best_move &lt;span style="color:#f92672">=&lt;/span> value, i
self&lt;span style="color:#f92672">.&lt;/span>best_responses[board] &lt;span style="color:#f92672">=&lt;/span> (best_move, best_value)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Is this reinforcement learning? What this code does is for any board composition it computes the value of the board, and it starts with the empty board. So effectively it is enumerating all the possible states, something that can be done for simple games like tic-tac-toe.&lt;/p>
&lt;p>Being able to evaluate all posible states makes it possible to evaluate the game in a deterministic way, which makes finding the best policy easy. The difficulty of reinforcement learning, I guess, is determining this &amp;ldquo;board value&amp;rdquo;, it will not always be simple.&lt;/p>
- https://frosklis.tk/posts/tic-tac-toe-dynamic-programming/ -</description></item><item><title>To Africa or not to Africa</title><link>https://frosklis.tk/posts/to-africa-or-not-to-africa/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>https://frosklis.tk/posts/to-africa-or-not-to-africa/</guid><description>Claudio Noguera https://frosklis.tk/posts/to-africa-or-not-to-africa/ -&lt;p>My girlfriend and I, we have got holidays in August. A little more than three weeks. However, we still haven&amp;rsquo;t booked anything.&lt;/p>
&lt;p>The only thing we are really sure of is that we will go somewhere none of us has previously been before.&lt;/p>
&lt;p>So we were thinking of going to Africa: a self drive tour across Namibia and Botswana.&lt;/p>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>It is a once in a lifetime experience.&lt;/li>
&lt;li>The scenery is stunning.&lt;/li>
&lt;/ul>
&lt;p>Cons: everything else.&lt;/p>
&lt;ul>
&lt;li>We should have organised everything at the beginning of the year or earlier.&lt;/li>
&lt;li>Availability is scarce. Specially for those things that are worth the most, such as the Okavango delta or the Victoria falls.&lt;/li>
&lt;li>It is expensive, very expensive.&lt;/li>
&lt;li>It might be dangerous, and not because of humans. Roads are in poor contition and you do have to care about animals.&lt;/li>
&lt;/ul>
&lt;p>So the question is to Africa or not to Africa?&lt;/p>
&lt;p>The problem with exotic destinations is that you do have to plan well in advance, so we are actually in a hurry to choose a place to go.&lt;/p>
&lt;p>Alternatives are:&lt;/p>
&lt;ul>
&lt;li>India, but where in India? North of India and Nepal? Just the north of India?&lt;/li>
&lt;li>Japan. Totally different, would be far easier to organize.&lt;/li>
&lt;li>Elsewhere.&lt;/li>
&lt;/ul>
&lt;p>Fortunately, I know that anywhere we go we will have a good time.&lt;/p>
- https://frosklis.tk/posts/to-africa-or-not-to-africa/ -</description></item><item><title>I got myself a Raspberry Pi</title><link>https://frosklis.tk/posts/i-got-myself-a-raspberry-pi/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://frosklis.tk/posts/i-got-myself-a-raspberry-pi/</guid><description>Claudio Noguera https://frosklis.tk/posts/i-got-myself-a-raspberry-pi/ -&lt;p>The new Raspberry Pi 3 is out and I got one. I will be using it as a media center with, but I will have other software installed as well. It has a 2TB drive attached to it which I will use to store series, movies and - most importantly - pictures.&lt;/p>
&lt;p>Software installed:&lt;/p>
&lt;ul>
&lt;li>Kodi media center&lt;/li>
&lt;li>Flexget&lt;/li>
&lt;li>Transmission&lt;/li>
&lt;li>Dropbox&lt;/li>
&lt;li>Bittorrent sync&lt;/li>
&lt;/ul>
&lt;p>I want to use it also as a backup tool, so when I plug in my hard drive (the one I travel with) the important stuff gets automatically copied to the RPi hard drive. I do have Bittorrent Sync for that, but given the amount of files I have, it is quite slow.&lt;/p>
- https://frosklis.tk/posts/i-got-myself-a-raspberry-pi/ -</description></item></channel></rss>